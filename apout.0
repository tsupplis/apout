APOUT(1)                FreeBSD General Commands Manual               APOUT(1)

NNAAMMEE
     aappoouutt - run PDP-11 UNIX a.out binaries

SSYYNNOOPPSSIISS
     aappoouutt [--iinnsstt] [--ttrraapp] [--jjssrr] [--ffpp] _f_i_l_e [_a_r_g_u_m_e_n_t_s _._._.]

DDEESSCCRRIIPPTTIIOONN
     aappoouutt runs the _f_i_l_e which contains a PDP-11 UNIX a.out binary from one of
     the following versions of UNIX: 1st Edition, 2nd Edition, 5th Edition,
     6th Edition, 7th Edition, 2.9BSD or 2.11BSD. Any arguments after the
     named _f_i_l_e are passed as arguments to the a.out binary.

     User-mode PDP-11 instructions are interpreted and executed by aappoouutt,, and
     system calls made by the interpreted a.out binary are performed by making
     real systems calls to the underlying native operating system.  In this
     way, the interpreted a.out binary can interact with the real files and
     processes on the system.

     If aappoouutt has been compiled with debugging enabled, the following options
     are available:

     --iinnsstt
           Output a line for each instruction emulated which gives: the PC in
           octal, the instruction in octal, the instruction's name, r0 to r6
           in octal, and the values of the N, Z, V and C flags.

     --ttrraapp
           Output a line for each system call, which gives the name of the
           system call, possibly a list of arguments, and the value returned
           by the system call.

     --jjssrr  Output a line for each _j_s_r or _r_t_s giving the value of the new PC.
           For 2.11BSD overlay binaries, also output a line describing each
           overlay change.

     --ffpp   For many of the emulated floating-point instructions, output a line
           describing the operation.

     If aappoouutt was not compiled with debugging enabled, none of these options
     exist.  Any debugging output is directed to the file _a_p_o_u_t_._d_b_g in the di­
     rectory where aappoouutt was started. The debugging output is primarily de­
     signed to aid the developers of aappoouutt,, and so it isn't exhaustive for all
     instructions, traps or floating-point operations.

EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
     aappoouutt requires one environment variable to be set: APOUT_ROOT. This vari­
     able names the `root' of the emulated filesystem.

     When aappoouutt works with filenames, if the filenames are relative, then they
     stay relative i.e all files on the system can be named, as long as they
     are given relative names. However, if the filenames are absolute, i.e
     they start with a slash, then aappoouutt prepends the value of the environment
     variable APOUT_ROOT to the filename. Therefore, if you have the 7th Edi­
     tion files located in _/_u_s_r_/_m_i_s_c_/_v_7_r_o_o_t and you do:

         %  setenv APOUT_ROOT /usr/misc/v7root
         %  apout $APOUT_ROOT/bin/sh
         $

     then you will be greeted with the 7th Edition Bourne shell prompt as
     shown: you will still be in the directory where you started aappoouutt,, but if
     you cd to /, then you will be taken to _/_u_s_r_/_m_i_s_c_/_v_7_r_o_o_t

     Note that you must set APOUT_ROOT before you can run aappoouutt..

EEMMUULLAATTEEDD EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
     Initially, PDP-11 binaries run via aappoouutt receive the following set of em­
     ulated environment variables:

         PATH  /bin:/usr/bin:/usr/sbin:/usr/ucb:/usr/games:/usr/local/bin:.
         HOME  /
         TERM  vt100

     Emulated programs can, of course, change this emulated environment; they
     can also fork and exec other PDP-11 binaries, which will inherit the mod­
     ified emulated environment.

IINNTTEERRAACCTTIIOONN WWIITTHH NNAATTIIVVEE PPRROOGGRRAAMMSS
     Binaries that are interpreted by aappoouutt can interact with native programs
     in several ways: through files in the filesystem, and through pipes. For
     example, you can do the following:

         %  ls -lR | apout $APOUT_ROOT/bin/wc | lpr
         %  apout $APOUT_ROOT/bin/sort < file | uniq > newfile

     where _l_s_, _l_p_r and _u_n_i_q are native programs.

     If aappoouutt is compiled with the NATIVES preprocessor directive enabled,
     then native system binaries can be executed as well as PDP-11 binaries.
     For example:

         % cd $APOUT_ROOT
         % ln -s `which vi` bin/vi       Add vi into the filespace
         % apout bin/sh
         $ ls -l                         Run the PDP-11 ls
           ....
         $ vi kim.c                      Run the native vi
         $ cc -o kim kim.c               Compile with the PDP-11 compiler

     Note that native executable receive the same environment variables inher­
     ited by the aappoouutt process, and not the emulated environment that aappoouutt
     passes to emulated executables.

EERRRROORR MMEESSSSAAGGEESS
     So as to distinguish from error messages generated by the interpreted
     PDP-11 binaries, aappoouutt prepends the word `Apout' to the beginning of its
     error messages. Below is the list of error messages that aappoouutt can gener­
     ate:

        Apout - V1 sectosixty too big
        Apout - can't malloc overlay!
        Apout - can't switch to empty overlay %d
        Apout - could not read 1st line of script
        Apout - couldn't load %s
        Apout - open_dir couldn't open %s
        Apout - out of argv space in script
        Apout - pid %d bad FP register used at PC 0%o
        Apout - pid %d bpt instruction at PC 0%o
        Apout - pid %d bus error at PC 0%06o
        Apout - pid %d emt instruction at PC 0%o
        Apout - pid %d halt instruction at PC 0%o
        Apout - pid %d illegal instruction %o at PC 0%o
        Apout - pid %d iot instruction at PC 0%o
        Apout - pid %d mark instruction at PC 0%o
        Apout - pid %d mfpd instruction at PC 0%o
        Apout - pid %d mtpd instruction at PC 0%o
        Apout - pid %d segmentation fault at PC 0%06o
        Apout - pid %d trap instruction at PC 0%o
        Apout - pid %d unimplemented instruction at PC 0%o
        Apout - pid %d unknown KE11 register 0%o
        Apout - pid %d waiti instruction at PC 0%o
        Apout - the %s syscall is not yet implemented
        Apout - the 2.11BSD %s syscall is not yet implemented
        Apout - unknown a.out format 0%o
        Apout - unknown magic in header: 0x%x
        Apout - unknown syscall %d at PC 0%o
        Apout cannot set the environment for the a.out %s
        Apout not compiled to support 1st Edition binaries
        Apout not compiled to support 2nd Edition binaries
        Apout not compiled to support 2.11BSD binaries

CCAAVVEEAATTSS
     As far as is known, the emulation of user-mode integer instructions is
     correct.  The emulation of floating-point instructions is seriously defi­
     cient: only 32-bit floats are emulated: the extra 32-bits of precision in
     PDP-11 doubles goes unused. None of the FP errors are emulated.

     The emulation of each of the emulated UNIX environments is mostly, but
     not fully, complete. Any UNIX system call environment is very sophisti­
     cated, and _a_p_o_u_t must translate from the emulated UNIX environment to the
     native one, and back. For an authorative description of what is missing
     from, or deficient in, each of the emulated UNIX environments, see the
     source files _v_1_t_r_a_p_._c_, _v_7_t_r_a_p_._c and _b_s_d_t_r_a_p_._c in the source directory for
     aappoouutt.. You should also consult the file _L_I_M_I_T_A_T_I_O_N_S in the source direc­
     tory for aappoouutt..

SSEEEE AALLSSOO
     The latest source for aappoouutt can be obtained via anonymous ftp at min­
     nie.tuhs.org in the directory pub/PDP-11/Sims/Apout. The directory
     pub/PDP-11/Sims/Apout/UnixBins contains tar archives of a.out binaries
     from several versions of UNIX.  Information on PDP-11 UNIX can be found
     on the PUPS web page at http://minnie.tuhs.org/PUPS/

HHIISSTTOORRYY
     The first version of aappoouutt appeared in 1995, and provided support for 6th
     and 7th Edition UNIX binaries. In 1998/1999, support was added for
     2.11BSD binaries.  In 1999/2000, support was added for 1st and 2nd Edi­
     tion UNIX binaries.

BSD                              June 10, 2002                               3
